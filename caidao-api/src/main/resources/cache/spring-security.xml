<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
            http://www.springframework.org/schema/security   
            http://www.springframework.org/schema/security/spring-security.xsd">

    <!--  Spring-Security 的配置 -->
    <!-- 注意开启use-expressions.表示开启表达式.  
    see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html  
     -->
    <http auto-config="true"  use-expressions="true" >

        <intercept-url pattern="/auth/login" access="permitAll"/>
        <intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>
        <intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>

        <form-login
                login-page="/auth/login.jsp"
                authentication-failure-url="/auth/login?error=true"
                default-target-url="/main/common"/>

        <logout
                invalidate-session="true"
                logout-success-url="/auth/login"
                logout-url="/auth/logout"/>
        <access-denied-handler error-page="/deniedpage.jsp" />
    </http>

    <!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
    <authentication-manager>
        <authentication-provider ref="authenticationProvider">
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <beans:property name="userDetailsService" ref="customUserDetailsService"/>
        <beans:property name="hideUserNotFoundExceptions" value="false"/>
        <beans:property name="passwordEncoder" ref="passwordEncode"/>
    </beans:bean>
    <beans:bean id="passwordEncode" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
    </beans:bean>
    <!-- 对密码进行MD5编码 -->
    <!--<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>-->

    <!--   
        通过 customUserDetailsService,Spring会自动的用户的访问级别.  
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.  
     -->

</beans:beans>